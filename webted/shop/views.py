from django.shortcuts import render, redirect, get_object_or_404
from .models import Product, Cart, CartItem, Order, OrderItem  
from .forms import ProductForm
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib import messages
from django.db.models import Count, Q
from user.models import CustomUser  
from shop.utils import send_line_message  
from django.utils import timezone 

User = get_user_model()

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
def product_list(request):
    products = Product.objects.annotate(
        approved_sales=Count("order_items", filter=Q(order_items__order__status="approved"))
    )
    return render(request, 'shop/product_list.html', {'products': products})

@login_required
def mark_order_completed(request, order_id):
    if request.user.role not in ['admin', 'staff']:
        messages.error(request, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
        return redirect('admin_order_list')

    order = get_object_or_404(Order, id=order_id)

    if order.status != "approved":
        messages.warning(request, "‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ '‡∏°‡∏≤‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß'")
        return redirect('admin_order_list')

    order.status = "completed"
    order.save()

    messages.success(request, f"üì¶ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #{order.id} ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ '‡∏°‡∏≤‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß'")
    return redirect('admin_order_list')



# ‚úÖ 2. Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô

@login_required
def admin_dashboard(request):
    if request.user.role not in ['admin', 'staff']:
        messages.error(request, '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ')
        return redirect('product_list')

    products = Product.objects.all()
    form = ProductForm()

    if request.method == "POST":
        form = ProductForm(request.POST, request.FILES)
        if form.is_valid():
            product = form.save(commit=False)
            product.image = request.FILES.get('image')

            if product.quantity <= 0:
                messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
                return redirect('admin_dashboard')

            product.save()
            messages.success(request, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
            return redirect('admin_dashboard')
        else:
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    # ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
            msg = (
            f"üÜï ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà: {product.name}\n"
            f"üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {product.quantity} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°\n"
            f"üõí ‡∏£‡∏µ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!"
        )
        customers = CustomUser.objects.filter(role='customer', line_user_id__isnull=False)
        for u in customers:
            send_line_message(u.line_user_id, msg)

                # ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
            msg = (
            f"üîÑ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product.name}\n"
            f"üì¶ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {product.quantity} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°\n"
            f"‚ÑπÔ∏è ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!"
        )
        customers = CustomUser.objects.filter(role='customer', line_user_id__isnull=False)
        for u in customers:
            send_line_message(u.line_user_id, msg)

    return render(request, 'shop/admin_dashboard.html', {'products': products, 'form': form})


# ‚úÖ 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö)
@login_required
def delete_product(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    product.delete()
    return redirect('admin_dashboard')

@login_required

def edit_product(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    if request.method == "POST":
        form = ProductForm(request.POST, request.FILES, instance=product)
        if form.is_valid():
            form.save()
                        # ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        msg = f"üîÑ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {product.name}\nüì¶ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!"
        customers = CustomUser.objects.filter(role='customer', line_user_id__isnull=False)
        for u in customers:
            send_line_message(u.line_user_id, msg)

            return redirect('admin_dashboard')
    else:
        form = ProductForm(instance=product)
    return render(request, 'shop/edit_product.html', {'form': form, 'product': product})

# ‚úÖ 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
@login_required
def cart_detail(request):
    cart = get_or_create_cart(request.user)
    items = cart.items.select_related('product')
    total = sum(item.product.price * item.quantity for item in items)
    return render(request, 'shop/cart_detail.html', {'cart': cart, 'items': items, 'total': total})

@login_required
def add_to_cart(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    quantity = int(request.POST.get('quantity', 1))
    if product.quantity < quantity:
        messages.error(request, f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {product.quantity} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return redirect('product_list')

    cart = get_or_create_cart(request.user)
    cart_item, created = CartItem.objects.get_or_create(cart=cart, product=product, defaults={'quantity': quantity})
    if not created:
        cart_item.quantity += quantity
        cart_item.save()
    product.quantity -= quantity
    product.save()
    messages.success(request, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('cart')

@login_required
def remove_from_cart(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)
    cart_item.product.quantity += cart_item.quantity
    cart_item.product.save()
    cart_item.delete()
    messages.success(request, "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('cart')


@login_required
def checkout(request):
    if request.method == 'POST':
        cart = get_or_create_cart(request.user)
        items = cart.items.select_related('product')

        if not items.exists():
            messages.error(request, "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
            return redirect('cart_detail')

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
        order = Order.objects.create(user=request.user)

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á OrderItem ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        order_items = []
        for item in items:
            order_item = OrderItem.objects.create(
                order=order,
                product=item.product,
                quantity=item.quantity,
                price=item.product.price
            )
            order_items.append(order_item)

        cart.items.all().delete()  # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á OrderItem ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß


        return redirect('order_success', order_id=order.id)

    return redirect('cart_detail')

from django.shortcuts import render, redirect
from .models import Cart, CartItem, Order, OrderItem

def order_success(request):
    """ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Order) """
    cart = Cart.objects.get(user=request.user)  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    cart_items = CartItem.objects.filter(cart=cart)  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤

    if not cart_items.exists():
        return redirect("cart")  # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤

    total_price = sum(item.product.price * item.quantity for item in cart_items)  # ‚úÖ ‡πÉ‡∏ä‡πâ CartItem

    context = {
        "items": cart_items,  # ‚úÖ ‡∏™‡πà‡∏á CartItem ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Template
        "total_price": total_price
    }
    return render(request, "shop/order_success.html", context)  # ‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏ path ‡πÄ‡∏ï‡πá‡∏°


def get_admin_user_id():
    """ ‡∏î‡∏∂‡∏á user_id ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• """
    admin = User.objects.filter(is_staff=True).first()  # ‚úÖ ‡∏î‡∏∂‡∏á Admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    return admin.line_user_id if admin and admin.line_user_id else None  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ field `line_user_id` ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

def confirm_order(request):
    if request.method == "POST":
        cart = get_or_create_cart(request.user)
        cart_items = CartItem.objects.filter(cart=cart)

        if not cart_items.exists():
            messages.error(request, "‚ùå ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
            return redirect("cart")

        pickup_date = request.POST.get("pickup_date")
        pickup_time = request.POST.get("pickup_time")
        payment_slip = request.FILES.get("payment_slip")
        comment = request.POST.get("comment", "")

        if not pickup_date or not pickup_time or not payment_slip:
            messages.error(request, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            return redirect("order_success")

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡πÉ‡∏´‡∏°‡πà
        order = Order.objects.create(
            user=request.user,
            total_price=0,
            pickup_date=pickup_date,
            pickup_time=pickup_time,
            payment_slip=payment_slip,
            comment=comment,
            status="waiting_confirm"
        )

        total = 0
        for item in cart_items:
            product = item.product

            # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á)
            if product.quantity < 20:
                message = (
                    f"‚ö†Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î!\n"
                    f"üì¶ {product.name}\n"
                    f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á {product.quantity} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°\n"
                    f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                )
                admins = CustomUser.objects.filter(role='admin', line_user_id__isnull=False)
                for admin in admins:
                    send_line_message(admin.line_user_id, message)

                staffs = CustomUser.objects.filter(role='staff', line_user_id__isnull=False)
                for staff in staffs:
                    send_line_message(staff.line_user_id, message)

            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á OrderItem
            OrderItem.objects.create(
                order=order,
                product=product,
                quantity=item.quantity,
                price=product.price
            )
            total += product.price * item.quantity

        order.total_price = total
        order.save()
        cart_items.delete()

        messages.success(request, "‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        if order.user.line_user_id:
            item_list = "\n".join([f"‚Ä¢ {item.product.name} x {item.quantity} ‡∏Å‡∏Å." for item in order.items.all()])
            send_line_message(order.user.line_user_id,
                f"üßæ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\nüì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n{item_list}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        items_text = ""
        order_items = order.items.all()
        for i in order_items:
            items_text += f"\n- {i.product.name} {i.quantity} ‡∏Å‡∏¥‡πÇ‡∏•"

        notify_message = (
            f"üì• ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà!\n"
            f"üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {order.user.full_name}\n"
            f"üßæ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: #{order.id}\n"
            f"üí∏ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {order.total_price} ‡∏ö‡∏≤‡∏ó\n"
            f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á: {order.pickup_date} ‡πÄ‡∏ß‡∏•‡∏≤ {order.pickup_time}\n"
            f"üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:{items_text}"
        )

        for person in CustomUser.objects.filter(role__in=['admin', 'staff'], line_user_id__isnull=False):
            send_line_message(person.line_user_id, notify_message)

        return redirect("payment_status")



# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
@login_required
def payment_status(request):
    orders = Order.objects.filter(user=request.user).order_by('-created_at')
    for order in orders:
        order.total_price = sum(item.quantity * item.price for item in order.items.all())
    return render(request, 'shop/payment_status.html', {'orders': orders})

#‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
def get_or_create_cart(user):
    return Cart.objects.get_or_create(user=user)[0]

@login_required
def update_cart_item(request, item_id):
    cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)

    if request.method == "POST":
        new_quantity = int(request.POST.get('quantity', 1))
        if new_quantity < 1:
            cart_item.delete()  # ‡∏ñ‡πâ‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        else:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if new_quantity > cart_item.product.quantity + cart_item.quantity:
                messages.error(request, f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {cart_item.product.quantity} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
                return redirect('cart')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'cart_detail' ‡πÄ‡∏õ‡πá‡∏ô 'cart'
            difference = new_quantity - cart_item.quantity
            if difference > 0 and difference > cart_item.product.quantity:
                messages.error(request, f"‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {cart_item.product.quantity} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
                return redirect('cart')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'cart_detail' ‡πÄ‡∏õ‡πá‡∏ô 'cart'

            cart_item.product.quantity -= difference
            cart_item.product.save()

            cart_item.quantity = new_quantity
            cart_item.save()

        messages.success(request, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('cart')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å 'cart_detail' ‡πÄ‡∏õ‡πá‡∏ô 'cart'


@login_required
def upload_payment_slip(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)

    if request.method == "POST" and request.FILES.get('payment_slip'):
        order.payment_slip = request.FILES['payment_slip']
        order.status = "waiting_confirm"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        order.save()
        messages.success(request, "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")


        return redirect('payment_status')
    
    return render(request, 'shop/upload_payment_slip.html', {'order': order})

from django.shortcuts import render, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .models import Order

@login_required
def order_complete(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)

    # ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    return render(request, "shop/order_complete.html", {"order": order})


from django.db.models import Case, When, IntegerField

@login_required

def admin_order_list(request):
    if request.user.role not in ['admin', 'staff']:
        messages.error(request, '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ')
        return redirect('product_list')
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î
    ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""

    orders = Order.objects.all().order_by(
        Case(
            When(status="waiting_confirm", then=0),
            When(status="approved", then=1),
            When(status="rejected", then=2),
            When(status="completed", then=3),
            default=4, output_field=IntegerField(),
        ),
        "pickup_date",  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î -> ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î)
        "pickup_time",  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏ä‡πâ‡∏≤ -> ‡πÄ‡∏¢‡πá‡∏ô)
    )

    return render(request, 'shop/admin_order_list.html', {'orders': orders})


@login_required

def admin_confirm_payment(request, order_id):
    if request.user.role not in ['admin', 'staff']:
        messages.error(request, '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ')
        return redirect('product_list')
    order = get_object_or_404(Order, id=order_id)

    if order.status != "waiting_confirm":
        messages.error(request, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ")
        return redirect("admin_order_list")

    if request.method == "POST":
        order.status = "approved"
        order.save()

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        for item in order.items.all():
            item.product.sold_quantity += item.quantity
            item.product.save()

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        if order.user.line_user_id:
            message = (
                f"üéâ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!\n"
                f"üßæ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: #{order.id}\n"
                f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö: {order.pickup_date} ‡πÄ‡∏ß‡∏•‡∏≤ {order.pickup_time}\n"
                f"üí¨ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
            )
            send_line_message(order.user.line_user_id, message)

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        staffs = CustomUser.objects.filter(role='staff', line_user_id__isnull=False)
        for staff in staffs:
            item_list = "\n".join([f"‚Ä¢ {item.product.name} x {item.quantity} ‡∏Å‡∏Å." for item in order.items.all()])
            message = (
                f"üéâ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!\n"
                f"üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n{item_list}\n"
                f"üìÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {order.pickup_date} ‡πÄ‡∏ß‡∏•‡∏≤ {order.pickup_time}\n"
                f"ü§ù ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!"
            )

            send_line_message(staff.line_user_id, message)

        messages.success(request, f"‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        return redirect("admin_order_list")

    return render(request, "shop/admin_confirm_payment.html", {"order": order})


@login_required

def admin_reject_payment(request, order_id):
    if request.user.role not in ['admin', 'staff']:
        messages.error(request, '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ')
        return redirect('product_list')
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"""
    
    order = get_object_or_404(Order, id=order_id)

    if order.status != "waiting_confirm":
        messages.error(request, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏î‡πâ")
        return redirect('admin_order_list')

    if request.method == "POST":
        order.status = "rejected"
        order.save()

        messages.warning(request, f"‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Order #{order.id}")

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        if order.user.line_user_id:
            message = (
                f"‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò\n"
                f"üßæ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: #{order.id}\n"
                f"üí¨ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            )
            send_line_message(order.user.line_user_id, message)

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        staffs = CustomUser.objects.filter(role='staff', line_user_id__isnull=False)
        for staff in staffs:
            message = (
                f"üö´ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠\n"
                f"üì¶ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: #{order.id}\n"
                f"üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {order.user.full_name}\n"
                f"üìù ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß"
            )
            send_line_message(staff.line_user_id, message)

        return redirect('admin_order_list')

    return render(request, 'shop/admin_reject_payment.html', {'order': order})


@login_required
def set_pickup_date(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)

    if request.method == "POST":
        pickup_date = request.POST.get("pickup_date")
        pickup_time = request.POST.get("pickup_time")
        comment = request.POST.get("comment")
        payment_slip = request.FILES.get("payment_slip")

        if not pickup_date or not pickup_time or not payment_slip:
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")
            return redirect('order_success', order_id=order_id)

        order.pickup_date = pickup_date
        order.pickup_time = pickup_time
        order.comment = comment
        order.payment_slip = payment_slip
        order.status = "waiting_confirm"
        order.save()

        messages.success(request, "‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        return redirect('payment_status')

    return render(request, 'shop/order_success.html', {'order': order})



from django.db.models import Sum
from django.db.models.functions import TruncDay, TruncWeek, TruncMonth
from django.http import JsonResponse

@login_required

def admin_sales_chart(request):
    if request.user.role not in ['admin']:
        messages.error(request, '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ')
        return redirect('product_list')
    return render(request, 'shop/admin_sales_chart.html')

from collections import defaultdict
from django.db.models.functions import TruncDay, TruncWeek, TruncMonth
from django.db.models import Sum, F
from django.utils import timezone
from dateutil.relativedelta import relativedelta
from django.http import JsonResponse
from .models import OrderItem

def sales_data(request):
    if request.user.role not in ['admin', 'staff']:
        return JsonResponse({"error": "Unauthorized"}, status=403)

    range_type = request.GET.get("range", "day")

    # ‡πÉ‡∏ä‡πâ trunc ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    if range_type == "week":
        trunc = TruncWeek("order__created_at")
    elif range_type == "month":
        trunc = TruncMonth("order__created_at")
    else:
        trunc = TruncDay("order__created_at")

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    now = timezone.now()
    if range_type == "month":
        start_date = now - relativedelta(months=11)
    elif range_type == "day":
        start_date = now - relativedelta(days=29)
    elif range_type == "week":
        start_date = now - relativedelta(weeks=11)
    else:
        start_date = now - relativedelta(months=12)

    raw_data = (
        OrderItem.objects
        .filter(order__status__in=["approved", "completed"], order__created_at__gte=start_date)
        .annotate(period=trunc)
        .values("period", "product__name")
        .annotate(total=Sum(F("price") * F("quantity")))
        .order_by("period")
    )

    labels = sorted(set(item["period"].strftime("%Y-%m-%d") for item in raw_data))
    product_totals = defaultdict(lambda: {label: 0 for label in labels})

    for item in raw_data:
        date_str = item["period"].strftime("%Y-%m-%d")
        product_name = item["product__name"]
        product_totals[product_name][date_str] += float(item["total"])

    datasets = []
    for product, values in product_totals.items():
        datasets.append({
            "label": product,
            "data": [values[label] for label in labels]
        })

    total_all = sum(sum(v for v in product.values()) for product in product_totals.values())

    return JsonResponse({
        "labels": labels,
        "datasets": datasets,
        "total": total_all
    })


import json
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from user.models import CustomUser
from shop.utils import send_line_message  
from django.contrib.auth import get_user_model
User = get_user_model()

@csrf_exempt
def line_webhook(request):
    if request.method != "POST":
        return JsonResponse({"status": "invalid method"}, status=400)

    body = json.loads(request.body.decode("utf-8"))
    events = body.get("events", [])

    for event in events:
        if event.get("type") == "message":
            user_id = event["source"]["userId"]
            message_text = event["message"]["text"].strip()

            # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÄ‡∏ä‡πà‡∏ô 0812345678
            phone = message_text

            # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå
            user = User.objects.filter(phone_number=phone).first()

            if user:
                user.line_user_id = user_id
                user.save()

                send_line_message(user_id, f"‚úÖ ‡∏ú‡∏π‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ {user.role.upper()}")
            else:
                send_line_message(user_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")

    return JsonResponse({"status": "ok"})

from django.shortcuts import render

def privacy_policy(request):
    return render(request, "shop/privacy_policy.html")

def terms_of_use(request):
    return render(request, "shop/terms_of_use.html")
